<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://nitinnilesh.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://nitinnilesh.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-01-23T17:04:05+00:00</updated><id>https://nitinnilesh.github.io/feed.xml</id><title type="html">blank</title><subtitle>Nitin Nilesh Personal Webpage </subtitle><entry><title type="html">Spelled Out Intro to Graph Convolution Networks</title><link href="https://nitinnilesh.github.io/blog/2024/gcn-notebook/" rel="alternate" type="text/html" title="Spelled Out Intro to Graph Convolution Networks"/><published>2024-02-08T12:57:00+00:00</published><updated>2024-02-08T12:57:00+00:00</updated><id>https://nitinnilesh.github.io/blog/2024/gcn-notebook</id><content type="html" xml:base="https://nitinnilesh.github.io/blog/2024/gcn-notebook/"><![CDATA[<p>This blog is the implementation of the paper <a href="https://arxiv.org/abs/1609.02907">Semi-Supervised Classification With Graph Convolutional Networks</a> by Kipf et al., ICLR 2017.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://www.youtube.com/embed/1SBhgQ5HMOw" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="100%" height="400px"/> </figure> </div> </div> <div class="caption"> I have made a video based upon this notebook titled "The spelled-out intro to Graph Convolutional Network (GCN)". Watch the video here. </div> <p>I’ve aimed to create a notebook that’s easy to understand. It begins with a simple graph, explaining the GCN formula step by step. I implemented the GCN model using <a href="https://pytorch.org">PyTorch</a> (without relying on specific graph libraries like <a href="https://pytorch-geometric.readthedocs.io/en/latest/">PyTorch Geometric</a>, <a href="https://www.dgl.ai">DGL</a>, etc.) on the Cora dataset. Additionally, I replicated a section of the paper called “Node Embeddings With Random Weights” using the Zachary Karate Club dataset. The goal was to demonstrate how GCN can be a powerful tool for extracting features from nodes in a graph.</p> <p>Going ahead, I have also implemented all the variants of the GCN mentioned in the paper which are:</p> <ul> <li>Single Parameter Model</li> <li>1st Order term only</li> <li>1st order model</li> <li>Chebyshev Polynomials for k = 2</li> <li>MLP</li> </ul> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/Spelled-Out-Intro-to-GCN.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div>]]></content><author><name></name></author><category term="spelled-out"/><category term="jupyter"/><summary type="html"><![CDATA[Implementation of the paper Semi-Supervised Classification With Graph Convolutional Networks by Kipf et al., ICLR 2017.]]></summary></entry><entry><title type="html">PyTorch Unfold and Fold: A hidden Gem for Convolution</title><link href="https://nitinnilesh.github.io/blog/2023/pytorch-unfold-and-fold-a-hidden-gem-for-convolution/" rel="alternate" type="text/html" title="PyTorch Unfold and Fold: A hidden Gem for Convolution"/><published>2023-08-30T05:10:27+00:00</published><updated>2023-08-30T05:10:27+00:00</updated><id>https://nitinnilesh.github.io/blog/2023/pytorch-unfold-and-fold-a-hidden-gem-for-convolution</id><content type="html" xml:base="https://nitinnilesh.github.io/blog/2023/pytorch-unfold-and-fold-a-hidden-gem-for-convolution/"><![CDATA[]]></content><author><name></name></author></entry></feed>